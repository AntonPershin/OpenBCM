/** \file dnxf/swstate/auto_generated/types/dnxf_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2021 Broadcom Inc. All rights reserved.
 */

#ifndef __DNXF_TYPES_H__
#define __DNXF_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/types.h>
#include <soc/dnxc/swstate/auto_generated/types/dnxc_types.h>
/*
 * STRUCTs
 */

typedef struct {
    /**
     * bitmap of mapped module-IDs
     */
    SHR_BITDCL* raw;
} soc_dnxf_modid_group_map_t;

typedef struct {
    /**
     * boolean value. '0' - mapping not valid ; '1' - mapping valid
     */
    uint32 valid;
    /**
     * mapped module-ID ; range of (0-2047)
     */
    uint32 module_id;
} soc_dnxf_modid_local_map_t;

typedef struct {
    /**
     * mapping of local module-ID to module-ID
     */
    soc_dnxf_modid_local_map_t* local_map;
    /**
     * mapping of group-ID to module-IDs.
     * used in FE2 multi-stage only
     */
    soc_dnxf_modid_group_map_t* group_map;
    /**
     * mapping module-ID to group-ID.
     * used in FE2 multi-stage only
     */
    soc_module_t* modid_to_group_map;
} soc_dnxf_modid_t;

typedef struct {
    /**
     * MC table mode (ID range). 0: 64K ; 1: 128K ; 2: 128K HALF ; 3: 256K ; 4: 256K ; 5: 512K
     */
    uint32 mode;
    /**
     * valid MC-ID bitmap
     */
    uint32* id_map;
    /**
     * Number of created multicast groups
     */
    uint32 nof_mc_groups_created;
} soc_dnxf_mc_t;

typedef struct {
    /**
     * first link of a group
     */
    soc_port_t* group_to_first_link;
} soc_dnxf_lb_t;

typedef struct {
    /**
     * cl72 state. '0' - cl72 disabled ; '1' - cl72 enabled
     */
    uint32* cl72_conf;
    /**
     * phy_lane_config bitmap, same as in bcm_port_resource API. Includes firmware configurations
     */
    int* phy_lane_config;
    /**
     * bitmap of links connected to a repeater
     */
    SHR_BITDCL* is_connected_to_repeater;
    /**
     * Flag used to indicate if we stoered the original isolation status.
     */
    int* isolation_status_stored;
    /**
     * Used to store the original isolation status before we isolate prior to putting FMAC in reset.
     */
    int* orig_isolated_status;
} soc_dnxf_port_t;

typedef struct {
    /**
     * Interrupt flags
     */
    uint32* flags;
    /**
     * Interrupt storm time count value
     */
    uint32* storm_timed_count;
    /**
     * Interrupt time period value
     */
    uint32* storm_timed_period;
    /**
     * interrupt storm nominal
     */
    uint32 storm_nominal;
} soc_dnxf_intr_t;

/**
 * DB for system upgrade
 */
typedef struct {
    /**
     * System upgrade state 0
     */
    uint32 state_0;
    /**
     * System upgrade state 1
     */
    uint32 state_1;
    /**
     * System upgrade state 2
     */
    uint32 state_2;
} soc_dnxf_system_upgrade_t;

typedef struct {
    /**
     * Module-ID Mapping Data Base
     */
    soc_dnxf_modid_t modid;
    /**
     * Multicast Data Base
     */
    soc_dnxf_mc_t mc;
    /**
     * Load Balancing Data Base
     */
    soc_dnxf_lb_t lb;
    /**
     * Port Data Base
     */
    soc_dnxf_port_t port;
    /**
     * Interrupt Data Base
     */
    soc_dnxf_intr_t intr;
    /**
     * Lane Mapping Data Base
     */
    soc_dnxc_lane_map_db_t lane_map_db;
    /**
     * SyncE status Data Base
     */
    soc_dnxc_synce_status_t synce;
    /**
     * System Upgrade status Data Base
     */
    soc_dnxf_system_upgrade_t system_upgrade;
} dnxf_state_t;


#endif /* __DNXF_TYPES_H__ */
