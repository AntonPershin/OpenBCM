/** \file algo/swstate/auto_generated/types/algo_tunnel_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __ALGO_TUNNEL_TYPES_H__
#define __ALGO_TUNNEL_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm/tunnel.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/algo/tunnel/algo_tunnel.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_tunnel.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
/*
 * STRUCTs
 */

/**
 * A struct holding udp src and dst port for the udp ports profile template
 */
typedef struct {
    uint16 src_port;
    uint16 dst_port;
} udp_ports_t;

/**
 * A struct holding ctx_additional_headers_profile and lif_additional_headers_profile for encap additional_headers_profile template
 */
typedef struct {
    /**
     * For additional_headers_profile allocation
     */
    uint8 lif_additional_headers_profile;
    /**
     * For additional_headers_profile allocation
     */
    uint8 ctx_additional_headers_profile;
    /**
     * Identifier for matching with properties entry
     */
    uint8 additional_headers_profile_identifier;
    /**
     * Type for classifying the lif additional_headers_profiles
     */
    uint8 additional_headers_stack_namespace;
} dnx_additional_headers_profile_map_t;

/**
 * A struct holding etpp additional_headers_profile information for the template
 */
typedef struct {
    /**
     * Identifier for matching with properties entry
     */
    uint8 additional_headers_profile_identifier;
} dnx_additional_headers_info_t;

typedef struct {
    /**
     * header_profile_identifier
     */
    uint8 additional_headers_profile_identifier;
    /**
     * Set start_current_next_protocol
     */
    uint8 main_header_start_current_next_protocol_enable;
    /**
     * Value for start_current_next_protocol
     */
    uint16 main_header_start_current_next_protocol;
    /**
     * Add additional_headers size to packet size
     */
    uint8 main_header_additional_headers_packet_size_enable;
    /**
     * additional_headers size
     */
    uint8 main_header_additional_headers_packet_size;
    /**
     * Set start_current_next_protocol
     */
    uint8 additional_header_0_start_current_next_protocol_enable;
    /**
     * Value for start_current_next_protocol
     */
    uint16 additional_header_0_start_current_next_protocol;
    /**
     * Add additional_headers size to packet size
     */
    uint8 additional_header_0_packet_size_enable;
    /**
     * additional_headers size
     */
    uint8 additional_header_0_packet_size;
    /**
     * protocol_specific_information
     */
    uint64 additional_header_0_protocol_specific_data;
    /**
     * additional headers type
     */
    dbal_fields_e additional_header_0_type;
    /**
     * Set start_current_next_protocol
     */
    uint8 additional_header_1_start_current_next_protocol_enable;
    /**
     * Value for start_current_next_protocol
     */
    uint16 additional_header_1_start_current_next_protocol;
    /**
     * Add additional_headers size to packet size
     */
    uint8 additional_header_1_packet_size_enable;
    /**
     * additional_headers size
     */
    uint8 additional_header_1_packet_size;
    /**
     * protocol_specific_information
     */
    uint64 additional_header_1_protocol_specific_data;
    /**
     * additional headers type
     */
    dbal_fields_e additional_header_1_type;
    /**
     * Set start_current_next_protocol
     */
    uint8 additional_header_2_start_current_next_protocol_enable;
    /**
     * Value for start_current_next_protocol
     */
    uint16 additional_header_2_start_current_next_protocol;
    /**
     * Add additional_headers size to packet size
     */
    uint8 additional_header_2_packet_size_enable;
    /**
     * additional_headers size
     */
    uint8 additional_header_2_packet_size;
    /**
     * protocol_specific_information
     */
    uint64 additional_header_2_protocol_specific_data;
    /**
     * additional headers type
     */
    dbal_fields_e additional_header_2_type;
} dnx_additional_headers_profile_properties_t;

/**
 * Algo Tunnel sw state
 */
typedef struct {
    /**
     * TUNNEL IPV6 SIP PROFILE TEMPLATE
     */
    dnx_algo_template_t tunnel_ipv6_sip_profile;
    /**
     * This template mirrors the additional header profiles reserved for UDP tunnels. Each UDP tunnel lif can point to a profile to get its UDP src and destination port.
     */
    dnx_algo_template_t udp_ports_profile;
    sw_state_htbl_t flow_gport_to_tunnel_type;
    /**
     * ETPP additional_headers_profile mapping template
     */
    dnx_algo_template_t additional_headers_profile_map;
    /**
     * ETPP additional_headers_profile managenment template
     */
    dnx_algo_template_t additional_headers_profile;
    /**
     * Additional headers properties
     */
    dnx_additional_headers_profile_properties_t additional_headers_properties[MAX_NOF_ADDITIONAL_HEADERS_PROFILE_IDENTIFIERS];
} algo_tunnel_sw_state_t;


#endif /* __ALGO_TUNNEL_TYPES_H__ */
