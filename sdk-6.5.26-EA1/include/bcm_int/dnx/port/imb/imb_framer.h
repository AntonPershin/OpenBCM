
/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _IMB_FRAMER_H__H_
#define _IMB_FRAMER_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <bcm_int/dnx/cosq/ingress/cosq_ingress_port.h>
#include <soc/dnxc/dnxc_port.h>
/*initialize an IMB.*/
int imb_framer_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_framer_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*TX pad packets to the specified size. value less than 17 means pad is disabled. */
int imb_framer_port_pad_size_set(
    int unit,
    bcm_port_t port,
    int value);
int imb_framer_port_pad_size_get(
    int unit,
    bcm_port_t port,
    int *value);

/*Add new IMB (Interface Management Block) port*/
int imb_framer_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Remove an existing IMB (Interface Management Block) port*/
int imb_framer_port_detach(
    int unit,
    bcm_port_t port);

/*Enable / disable a port*/
int imb_framer_port_enable_set(
    int unit,
    bcm_port_t port,
    uint32 flags,
    int enable);
int imb_framer_port_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Enable / disable loopback on a port*/
int imb_framer_port_loopback_set(
    int unit,
    bcm_port_t port,
    int loopback);
int imb_framer_port_loopback_get(
    int unit,
    bcm_port_t port,
    int *loopback);

/*Set / get priority configuration for the port*/
int imb_framer_port_priority_config_set(
    int unit,
    bcm_port_t port,
    const bcm_port_prio_config_t * priority_config);
int imb_framer_port_priority_config_get(
    int unit,
    bcm_port_t port,
    bcm_port_prio_config_t * priority_config);

/*Get link status*/
int imb_framer_port_link_get(
    int unit,
    bcm_port_t port,
    int flags,
    int *link);

/*Filter packets bigger than the specified value*/
int imb_framer_port_max_packet_size_set(
    int unit,
    bcm_port_t port,
    int value);
int imb_framer_port_max_packet_size_get(
    int unit,
    bcm_port_t port,
    int *value);

/*Set/get Average inter-packet gap*/
int imb_framer_port_tx_average_ipg_set(
    int unit,
    bcm_port_t port,
    int ipg_value);
int imb_framer_port_tx_average_ipg_get(
    int unit,
    bcm_port_t port,
    int *ipg_value);

/*Config MIB counter max size.*/
int imb_framer_port_cntmaxsize_set(
    int unit,
    bcm_port_t port,
    int val);
int imb_framer_port_cntmaxsize_get(
    int unit,
    bcm_port_t port,
    int *val);

/*Local fault steatus get*/
int imb_framer_port_local_fault_status_get(
    int unit,
    bcm_port_t port,
    int *local_fault);

/*Clear Local fault steatus*/
int imb_framer_port_local_fault_status_clear(
    int unit,
    bcm_port_t port);

/*Remote fault status get*/
int imb_framer_port_remote_fault_status_get(
    int unit,
    bcm_port_t port,
    int *remote_fault);

/*Clear Remote fault status*/
int imb_framer_port_remote_fault_status_clear(
    int unit,
    bcm_port_t port);

/*local fault enable set/get*/
int imb_framer_port_local_fault_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_framer_port_local_fault_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*remote fault enable set/get*/
int imb_framer_port_remote_fault_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_framer_port_remote_fault_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Get port local and emote faults status*/
int imb_framer_port_faults_status_get(
    int unit,
    bcm_port_t port,
    int *local_fault,
    int *remote_fault);

/*Get the Bandwidth for the CDU.*/
int imb_framer_bandwidth_get(
    int unit,
    bcm_port_t port,
    int is_port_include,
    int *bandwidth);

/*Get/set the Start TX threshold.*/
int imb_framer_port_tx_start_thr_set(
    int unit,
    bcm_port_t port,
    int speed,
    int start_tx_thr);
int imb_framer_port_tx_start_thr_get(
    int unit,
    bcm_port_t port,
    int *start_tx_thr);

/*Set/get PRD Port Profile.*/
int imb_framer_prd_port_profile_map_set(
    int unit,
    bcm_port_t port,
    uint32 profile);
int imb_framer_prd_port_profile_map_get(
    int unit,
    bcm_port_t port,
    uint32 *profile);

/*Port speed configuration*/
int imb_framer_port_speed_config_set(
    int unit,
    bcm_port_t port,
    const portmod_speed_config_t * speed_config);

/*Get mib counter*/
int imb_framer_port_mib_counter_get(
    int unit,
    bcm_port_t port,
    int counter_type,
    uint64 *counter_val);

/*Set mib counter*/
int imb_framer_port_mib_counter_set(
    int unit,
    bcm_port_t port,
    int counter_type,
    const uint64 *counter_val);

/*Configure calendar for FlexE related ports*/
int imb_framer_calendar_set(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Configure FIFO resources for flexe client*/
int imb_framer_port_fifo_resource_set(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Get/set the link fault forcing.*/
int imb_framer_port_link_fault_force_set(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int enable);
int imb_framer_port_link_fault_force_get(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int *enable);

#endif /*_IMB_FRAMER_H_*/
